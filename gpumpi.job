#!/bin/bash -x
#SBATCH --job-name=JAXHPC
#SBATCH --partition=dev_gpu_a100_il
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=6
#SBATCH --gpus-per-node=6
#SBATCH --time=00:30:00
#SBATCH --mem=16G
#SBATCH --export=ALL

set -o pipefail
export PYTHONUNBUFFERED=1

# ✅ Load compatible modules
module load lib/hdf5/1.14-gnu-14.2-openmpi-5.0
module load devel/python/3.11.7-gnu-14.2
module load devel/cuda/12.8

ENV_DIR=$HOME/gpuMPI_jax_env

# ✅ Create environment if needed
if [ ! -d "$ENV_DIR" ]; then
    python -m venv $ENV_DIR
    source $ENV_DIR/bin/activate
    pip install --upgrade pip
    pip install --upgrade "jax[cuda12]"
    MPICC=mpicc pip install --no-binary=mpi4py mpi4py
    pip install numpy matplotlib
else
    source $ENV_DIR/bin/activate
fi

# ✅ Prevent JAX from allocating all memory
export XLA_PYTHON_CLIENT_PREALLOCATE=false

# ✅ Fix CUDA/MPI path issues
unset LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$(dirname $(which mpicc))/../lib:$LD_LIBRARY_PATH

# ✅ Suppress warnings
export OMPI_MCA_coll_hcoll_enable=0
export OMPI_MCA_pml=ob1

# ✅ CPU threading
export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK

# ✅ GPU check
nvidia-smi
python -c "import jax; print('JAX devices:', jax.devices())"

echo "Local rank: $SLURM_LOCALID"
echo "CUDA_VISIBLE_DEVICES before mpirun: $CUDA_VISIBLE_DEVICES"
# ✅ Ensure environment variables for distributed JAX
export JAX_NUM_PROCESSES=$SLURM_NTASKS
export JAX_COORDINATOR_ADDRESS=$(scontrol show hostname $SLURM_NODELIST | head -n 1):1234

# ✅ Launch script via MPI
mpirun -np 6 \
  --bind-to none --map-by slot \
  -x PATH -x LD_LIBRARY_PATH -x PYTHONPATH \
  -x NCCL_DEBUG=INFO -x XLA_PYTHON_CLIENT_PREALLOCATE=false \
  -x JAX_NUM_PROCESSES -x JAX_COORDINATOR_ADDRESS \
  --mca plm_rsh_no_tree_spawn 1 \
  bash -c '
    export CUDA_VISIBLE_DEVICES=$OMPI_COMM_WORLD_RANK
    python JAXMPI.py
  '

