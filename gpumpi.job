#!/bin/bash -x
#SBATCH --job-name=JAXHPC
#SBATCH --partition=dev_gpu_a100_il
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=2                   # ✔ Keep 1 task per GPU
#SBATCH --gpus-per-node=2                     # ✔ Using 2 GPUs
#SBATCH --time=00:30:00
#SBATCH --mem=8G
#SBATCH --export=ALL

set -o pipefail
export PYTHONUNBUFFERED=1

# ✅ Load compatible MPI, CUDA, and Python toolchain
module load lib/hdf5/1.14-gnu-14.2-openmpi-5.0
module load devel/python/3.11.7-gnu-14.2
module load devel/cuda/12.8

ENV_DIR=$HOME/gpuMPI_jax_env

# ✅ Install virtual environment and GPU JAX + MPI4PY only once
if [ ! -d "$ENV_DIR" ]; then
    python -m venv $ENV_DIR
    source $ENV_DIR/bin/activate

    pip install --upgrade pip

    # ✅ Install GPU-compatible JAX (CUDA 12.x)
    pip install --upgrade "jax[cuda12]"

    # ✅ Install mpi4py using system MPI compiler (to link correctly)
    MPICC=mpicc pip install --no-binary=mpi4py mpi4py

    # ✅ Other dependencies
    pip install numpy matplotlib
else
    source $ENV_DIR/bin/activate
fi

export XLA_PYTHON_CLIENT_PREALLOCATE=false

# ❌ Removed problematic XLA flag
# export XLA_FLAGS="--xla_gpu_enable_async_collectives=true"

# ✅ Fix CUDA & MPI library paths explicitly
unset LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$(dirname $(which mpicc))/../lib:$LD_LIBRARY_PATH

# ✅ Suppress UCX and HCOLL warnings
export OMPI_MCA_coll_hcoll_enable=0
export OMPI_MCA_pml=ob1

nvidia-smi
python -c "import jax; print('JAX devices:', jax.devices())"

# ✅ Launch with mpirun, using SLURM's task count
mpirun -np $SLURM_NTASKS python -u JAXMPI.py
